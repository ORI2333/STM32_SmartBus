/*
 *
 * NMEA library
 * URL: http://nmea.sourceforge.net
 * Author: Tim (xtimor@gmail.com)
 * Licence: http://www.gnu.org/licenses/lgpl.html
 * $Id: sentence.h 17 2008-03-11 11:56:11Z xtimor $
 *
 */

/*! \file */

#ifndef __NMEA_SENTENCE_H__
#define __NMEA_SENTENCE_H__

#include "info.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * NMEA packets type which parsed and generated by library
 */
enum nmeaPACKTYPE
{
    GPNON   = 0x0000,   /**< Unknown packet type. */
    GPGGA   = 0x0001,   /**< GGA - Essential fix data which provide 3D location and accuracy data. */
    GPGSA   = 0x0002,   /**< GSA - GPS receiver operating mode, SVs used for navigation, and DOP values. */
    GPGSV   = 0x0004,   /**< GSV - Number of SVs in view, PRN numbers, elevation, azimuth & SNR values. */
    GPRMC   = 0x0008,   /**< RMC - Recommended Minimum Specific GPS/TRANSIT Data. */
    GPVTG   = 0x0010,    /**< VTG - Actual track made good and speed over ground. */

    GPTXT   = 0x0020,   /**< TXT - 产品信息、天线状态、闰秒等 */

    BDGSV   = 0x0040,   /**< GSV - 可见卫星 */
    BDGSA   = 0x0080,   /**< GGA - 精度因子和有效卫星 */

    GNZDA   = 0x0100,   /**< ZDA - 时间和日期 */
    GNGLL   = 0x0200,   /**< GLL - 地理位置 经纬度 */
    GNVTG   = 0x0400,    /**< VTG - 对地速度和航向 */
    GNRMC   = 0x0800,   /**< RMC - 推荐的最少专用航向数据 */
    GNGGA   = 0x1000,   /**< GGA - 接收机定位数据，详细*/
};

/**
 * GGA packet information structure (Global Positioning System Fix Data)
 */
typedef struct _nmeaGPGGA
{
    nmeaTIME utc;       /**< UTC of position (just time) */
    double  lat;        /**< Latitude in NDEG - [degree][min].[sec/60] */
    char    ns;         /**< [N]orth or [S]outh */
    double  lon;        /**< Longitude in NDEG - [degree][min].[sec/60] */
    char    ew;         /**< [E]ast or [W]est */
    int     sig;        /**< GPS quality indicator (0 = Invalid; 1 = Fix; 2 = Differential, 3 = Sensitive) */
    int     satinuse;   /**< Number of satellites in use (not those in view) */
    double  HDOP;       /**< Horizontal dilution of precision */
    double  elv;        /**< Antenna altitude above/below mean sea level (geoid) */
    char    elv_units;  /**< [M]eters (Antenna height unit) */
    double  diff;       /**< Geoidal separation (Diff. between WGS-84 earth ellipsoid and mean sea level. '-' = geoid is below WGS-84 ellipsoid) */
    char    diff_units; /**< [M]eters (Units of geoidal separation) */
    double  dgps_age;   /**< Time in seconds since last DGPS update */
    int     dgps_sid;   /**< DGPS station ID number */

} nmeaGPGGA;

/**
 * GSA packet information structure (Satellite status)
 */
typedef struct _nmeaGPGSA
{
    char    fix_mode;   /**< Mode (M = Manual, forced to operate in 2D or 3D; A = Automatic, 3D/2D) */
    int     fix_type;   /**< Type, used for navigation (1 = Fix not available; 2 = 2D; 3 = 3D) */
    int     sat_prn[NMEA_MAXSAT]; /**< PRNs of satellites used in position fix (null for unused fields) */
    double  PDOP;       /**< Dilution of precision */
    double  HDOP;       /**< Horizontal dilution of precision */
    double  VDOP;       /**< Vertical dilution of precision */

} nmeaGPGSA;

/**
 * GSV packet information structure (Satellites in view)
 */
typedef struct _nmeaGPGSV
{
    int     pack_count; /**< Total number of messages of this type in this cycle */
    int     pack_index; /**< Message number */
    int     sat_count;  /**< Total number of satellites in view */
    nmeaSATELLITE sat_data[NMEA_SATINPACK];

} nmeaGPGSV;

/**
 * RMC packet information structure (Recommended Minimum sentence C)
 */
typedef struct _nmeaGPRMC
{
    nmeaTIME utc;       /**< UTC of position */
    char    status;     /**< Status (A = active or V = void) */
    double  lat;        /**< Latitude in NDEG - [degree][min].[sec/60] */
    char    ns;         /**< [N]orth or [S]outh */
    double  lon;        /**< Longitude in NDEG - [degree][min].[sec/60] */
    char    ew;         /**< [E]ast or [W]est */
    double  speed;      /**< Speed over the ground in knots */
    double  direction;  /**< Track angle in degrees True */
    double  declination; /**< Magnetic variation degrees (Easterly var. subtracts from true course) */
    char    declin_ew;  /**< [E]ast or [W]est */
    char    mode;       /**< Mode indicator of fix type (A = autonomous, D = differential, E = estimated, N = not valid, S = simulator) */

} nmeaGPRMC;

/**
 * VTG packet information structure (Track made good and ground speed)
 */
typedef struct _nmeaGPVTG
{
    double  dir;        /**< True track made good (degrees) */
    char    dir_t;      /**< Fixed text 'T' indicates that track made good is relative to true north */
    double  dec;        /**< Magnetic track made good */
    char    dec_m;      /**< Fixed text 'M' */
    double  spn;        /**< Ground speed, knots */
    char    spn_n;      /**< Fixed text 'N' indicates that speed over ground is in knots */
    double  spk;        /**< Ground speed, kilometers per hour */
    char    spk_k;      /**< Fixed text 'K' indicates that speed over ground is in kilometers/hour */

} nmeaGPVTG;



/**
 * GNGGA packet information structure (Global Positioning System Fix Data)
 */
typedef struct _nmeaGNGGA
{
    nmeaTIME utc;       /**< hhmmss.sss， 当前定位的UTC时间 */
    double  Lat;        /**< ddmm.mmmm， 纬度 前 2 字符表示度，后面的字符表示分  */
    char    uLat;       /**< 字符， 纬度方向： N-北， S-南 */
    double  Lon;        /**< dddmm.mmmm， 经度，前 3 字符表示度，后面的字符表示分 */
    char    uLon;       /**< 字符， 经度方向： E-东， W-西 */
    int     FS;         /**< 数值， 指示当前定位质量，该字段不应为空 (0 = 定位不可用或无效; 1 = SPS 定位模式，定位有效; 6 = 估算模式（航位推算）) */
    int     numSv;      /**< 数值， 用于定位的卫星数目， 00~24 */
    double  HDOP;       /**< 数值， 水平精度因子（ HDOP） */
    double  Msl;        /**< 数值，海拔高度，即接收机天线相对于大地水准面的高度 */
    char    uMsl;       /**< 字符，高度单位，米， 固定字符 M */
    double  Sep;        /**< 数值，参考椭球面与大地水准面之间的距离，"-"表示大地水准面低于参考椭球面 */
    char    uSep;        /**< 字符，高度单位，米， 固定字符 M */
    double  DiffAge;    /**< 数值，差分修正的数据龄期，未使用 DGPS 时该域为空 */
    int     DiffSta;    /**< 数值，差分参考站的 ID */

} nmeaGNGGA;


/**
 * GNRMC packet information structure (Recommended Minimum sentence C)
 */
typedef struct _nmeaGNRMC
{
    nmeaTIME utc;        /**< hhmmss.sss， 当前定位的UTC时间 */
    char    status;     /**< 字符，位置有效标志(A = 数据有效 或 V = 接收机警告，数据无效) */
    double  Lat;        /**< ddmm.mmmm， 纬度 前 2 字符表示度，后面的字符表示分  */
    char    uLat;       /**< 字符， 纬度方向： N-北， S-南 */
    double  Lon;        /**< dddmm.mmmm， 经度，前 3 字符表示度，后面的字符表示分 */
    char    uLon;       /**< 字符， 经度方向： E-东， W-西 */
    double  Spd;        /**< 数值 对地速度，单位为节 */
    double  Cog;        /**< 数值 对地真航向，单位为度 */
    double  mv;         /**< 数值 磁偏角，单位为度。 固定为空*/
    char    mvE;        /**< 字符 磁偏角方向： E-东， W-西。 固定为空 */
    char    mode;       /**< 字符 定位模式标志 (A = 自主模式, D = 差分模式, E = 估算模式, N = 数据无效) */

} nmeaGNRMC;

/**
 * VTG packet information structure (Track made good and ground speed)
 */
typedef struct _nmeaGNVTG
{
    double  Cogt;       /**< 数值 对地真航向，单位为度 */
    char    T;          /**< 字符 真北指示， 固定为 T*/
    double  CogM;        /**< 数值 对地磁北航向，单位为度*/
    char    M;          /**< 字符 磁北指示， 固定为 M*/
    double  Sog;        /**< 数值 对地速度，单位为节 */
    char    N;          /**< 字符 速度单位节， 固定为 N */
    double  kph;        /**< 数值 对地速度，单位为千米每小时 */
    char    K;          /**< 字符 速度单位，千米每小时， 固定为 K*/
    char    mode;       /**< 字符 定位模式标志 (A = 自主模式, D = 差分模式, E = 估算模式, N = 数据无效) */
} nmeaGNVTG;


/**
 * ZDA packet information structure (Track made good and ground speed)
 */
typedef struct _nmeaGNZDA
{
    nmeaTIME utc;       /**< hhmmss.sss， 当前定位的UTC时间 */
} nmeaGNZDA;

/**
 * GNGLL packet information structure (Recommended Minimum sentence C)
 */
typedef struct _nmeaGNGLL
{
    double  Lat;        /**< ddmm.mmmm， 纬度 前 2 字符表示度，后面的字符表示分  */
    char    uLat;       /**< 字符， 纬度方向： N-北， S-南 */
    double  Lon;        /**< dddmm.mmmm， 经度，前 3 字符表示度，后面的字符表示分 */
    char    uLon;       /**< 字符， 经度方向： E-东， W-西 */
    nmeaTIME utc;       /**< hhmmss.sss， 当前定位的UTC时间 */
    char    Value;      /**< 字符 数据有效性 (A-数据有效，V数据无效) */
    char    mode;       /**< 字符 定位模式标志 (A = 自主模式, D = 差分模式, E = 估算模式, N = 数据无效) */

} nmeaGNGLL;

/**
 * GSV packet information structure (Satellites in view)
 */
typedef struct _nmeaBDGSV
{
    int     NumMsg; /**< 字符 语句总数。每条 GSV 语句最多输出 4 颗可见卫星信息，因此，当该系统可见卫星多于 4 颗时，将需要多条 GSV 语句。 */
    int     MsgNo; /**< 数字 当前语句编号 */
    int     numSv;  /**< 数值 可见卫星总数*/
    /*{,SVID,ele,az,cn0} 
    卫星编号；
    仰角0-90 度
    方位角 0-359 度
    载噪比 0-99 dB-Hz如果没有跟踪到当前卫星，补空*/
    nmeaSATELLITE sat_data[NMEA_SATINPACK];
//    int signalld;   /** 数值 NMEA 所定义的 GNSS 信号 ID（ 0 代表全部信号）*/

} nmeaBDGSV;

/**
 * GSA packet information structure (Satellite status)
 */
typedef struct _nmeaBDGSA
{
    char    Smode;      /**< 字符 模式切换方式指示 (M = 手动切换,强制为2D或者3D工作模式  A = 自动切换,接收机自动切换 3D/2D模式) */
    int     FS;         /**< 数字, 定位状态标志 (1 = 定位无效; 2 = 2D; 3 = 3D) */
    int     SVID[NMEA_MAXSAT]; /**< 用于定位的卫星编号，该字段共显示 12 颗可用卫星编号，多于 12 颗时只输出前 12 颗，不足 12 颗时不足的区域补空 */
    double  PDOP;       /**< 数值 位置精度因子（ PDOP）*/
    double  HDOP;       /**< 数值 水平精度因子（ HDOP） */
    double  VDOP;       /**< 数值 垂直精度因子（ VDOP）*/
//    int     systemId;   /**NMEA 所定义的 GNSS 系统 ID 号（备注[3]）仅 NMEA 4.1 及以上版本有效*/

} nmeaBDGSA;

/**
 * TXT packet information structure (Satellite status)
 */
typedef struct _nmeaGPTXT
{
    char    xx;         /**< 数值，当前消息的语句总数 01~99， 如果某个消息过长，需要分为多条信息显示。 */
    int     yy;         /**< 数值, 语句编号 01~99。*/
    int     zz;         /**< 数值,文本识别符(00=错误信息；01=警告信息；02=通知信息；07=用户信息。) */
} nmeaGPTXT;

void nmea_zero_GPGGA(nmeaGPGGA *pack);
void nmea_zero_GPGSV(nmeaGPGSV *pack);
void nmea_zero_GPRMC(nmeaGPRMC *pack);
void nmea_zero_GPVTG(nmeaGPVTG *pack);

void nmea_zero_GNGGA(nmeaGNGGA *pack);
void nmea_zero_GNRMC(nmeaGNRMC *pack);
void nmea_zero_GNVTG(nmeaGNVTG *pack);
void nmea_zero_GNZDA(nmeaGNZDA *pack);
void nmea_zero_GNGLL(nmeaGNGLL *pack);
void nmea_zero_GPGSA(nmeaGPGSA *pack);
void nmea_zero_BDGSA(nmeaBDGSA *pack);
void nmea_zero_GPTXT(nmeaGPTXT *pack);

#ifdef  __cplusplus
}
#endif

#endif /* __NMEA_SENTENCE_H__ */
