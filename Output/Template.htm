<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Dec 30 11:10:31 2020
<BR><P>
<H3>Maximum Stack Usage =       3224 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; nmea_decode_test &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4a]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[49]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[4d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[50]">error</a> from gps_config.o(i.error) referenced from nema_decode_test.o(i.nmea_decode_test)
 <LI><a href="#[4c]">fputc</a> from bsp_usart1.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[51]">gps_info</a> from gps_config.o(i.gps_info) referenced from nema_decode_test.o(i.nmea_decode_test)
 <LI><a href="#[4b]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4f]">trace</a> from gps_config.o(i.trace) referenced from nema_decode_test.o(i.nmea_decode_test)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[75]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[132]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[133]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[134]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[135]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[136]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNZDA2info
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNRMC2info
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_work_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_MQTT_SERVER
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNVTG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSV
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSA
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_work_test
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_check_cmd
</UL>

<P><STRONG><a name="[120]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u2_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
</UL>

<P><STRONG><a name="[12e]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[10e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_pack_type
</UL>

<P><STRONG><a name="[58]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNRMC2info
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[73]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[13f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[64]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[63]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[72]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[78]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[49]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[141]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_delay.o(i.CPU_TS_TmrInit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>

<P><STRONG><a name="[7c]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_delay.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>

<P><STRONG><a name="[7a]"></a>CPU_TS_Tmr_Delay_US</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, core_delay.o(i.CPU_TS_Tmr_Delay_US))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_TS_Tmr_Delay_US
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
</UL>

<P><STRONG><a name="[80]"></a>DHT11_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_dht11.o(i.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_Init &rArr; DHT11_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>DHT11_Read_TempAndHumidity</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, bsp_dht11.o(i.DHT11_Read_TempAndHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DHT11_Read_TempAndHumidity &rArr; DHT11_ReadByte &rArr; CPU_TS_Tmr_Delay_US
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_Out_PP
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_IPU
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
</UL>

<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; GPS_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USARTx_TX_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[8e]"></a>DMA_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_Enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USARTx_TX_Config
</UL>

<P><STRONG><a name="[8b]"></a>DMA_DeInit</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USARTx_TX_Config
</UL>

<P><STRONG><a name="[ad]"></a>DMA_GetITStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[a9]"></a>DMA_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
</UL>

<P><STRONG><a name="[8c]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USARTx_TX_Config
</UL>

<P><STRONG><a name="[e3]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_Enable
</UL>

<P><STRONG><a name="[89]"></a>DMA_USARTx_TX_Config</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, bsp_dma.o(i.DMA_USARTx_TX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_USARTx_TX_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>Delay_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_systick.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>EC20_CONNECT_MQTT_SERVER</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, bsp_ec20.o(i.EC20_CONNECT_MQTT_SERVER))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EC20_CONNECT_MQTT_SERVER &rArr; EC20_send_cmd &rArr; u2_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_SERVER_CFG_INFOR
</UL>

<P><STRONG><a name="[95]"></a>EC20_CONNECT_SERVER_CFG_INFOR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ec20.o(i.EC20_CONNECT_SERVER_CFG_INFOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EC20_CONNECT_SERVER_CFG_INFOR &rArr; EC20_CONNECT_MQTT_SERVER &rArr; EC20_send_cmd &rArr; u2_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_MQTT_SERVER
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>EC20_INIT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_ec20.o(i.EC20_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EC20_INIT &rArr; EC20_work_test &rArr; EC20_send_cmd &rArr; u2_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_work_test
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>EC20_MQTT_SEND_AUTO</STRONG> (Thumb, 682 bytes, Stack size 80 bytes, bsp_ec20.o(i.EC20_MQTT_SEND_AUTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EC20_MQTT_SEND_AUTO &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[9a]"></a>EC20_check_cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_ec20.o(i.EC20_check_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EC20_check_cmd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
</UL>

<P><STRONG><a name="[92]"></a>EC20_send_cmd</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bsp_ec20.o(i.EC20_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EC20_send_cmd &rArr; u2_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u2_printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_check_cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_work_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_MQTT_SERVER
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
</UL>

<P><STRONG><a name="[97]"></a>EC20_work_test</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_ec20.o(i.EC20_work_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EC20_work_test &rArr; EC20_send_cmd &rArr; u2_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_INIT
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[9f]"></a>EXTI_Key_Config</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bsp_exti.o(i.EXTI_Key_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI_Key_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>GMTconvert</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, gps_config.o(i.GMTconvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GMTconvert
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_Out_PP
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_IPU
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GPIO_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_USART_Config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[85]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
</UL>

<P><STRONG><a name="[87]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
</UL>

<P><STRONG><a name="[81]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[a5]"></a>GPS_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gps_config.o(i.GPS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPS_Config &rArr; GPS_DMA_Config &rArr; GPS_Interrupt_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_USART_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>GPS_ProcessDMAIRQ</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_it.o(i.GPS_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPS_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[b3]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[b1]"></a>I2C_Configuration</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, oled_i2c.o(i.I2C_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_Configuration &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[bb]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[b6]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[b2]"></a>I2C_Init</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[b9]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[ba]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[b5]"></a>I2C_WriteByte</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, oled_i2c.o(i.I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[bc]"></a>LED_GPIO_Config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Interrupt_Config
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Interrupt_Config
</UL>

<P><STRONG><a name="[c0]"></a>OLED_Fill</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, oled_i2c.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>OLED_Init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, oled_i2c.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_Init &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>OLED_SetPos</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled_i2c.o(i.OLED_SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN3
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
</UL>

<P><STRONG><a name="[c5]"></a>OLED_ShowCN</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, oled_i2c.o(i.OLED_ShowCN))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_ShowCN &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>OLED_ShowCN2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, oled_i2c.o(i.OLED_ShowCN2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_ShowCN2 &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>OLED_ShowCN3</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, oled_i2c.o(i.OLED_ShowCN3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_ShowCN3 &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[c8]"></a>OLED_ShowStr</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, oled_i2c.o(i.OLED_ShowStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>OLED_Show_num</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, oled_i2c.o(i.OLED_Show_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OLED_Show_num &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[d1]"></a>PEC_Calculation</STRONG> (Thumb, 168 bytes, Stack size 36 bytes, mlx90614.o(i.PEC_Calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PEC_Calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadMemory
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USARTx_TX_Config
</UL>

<P><STRONG><a name="[ae]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_USART_Config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GPIO_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_USART_Config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[b4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d4]"></a>SMBus_Delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mlx90614.o(i.SMBus_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_StopBit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_StartBit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_SendBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReceiveBit
</UL>

<P><STRONG><a name="[cb]"></a>SMBus_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mlx90614.o(i.SMBus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMBus_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>SMBus_ReadMemory</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, mlx90614.o(i.SMBus_ReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SMBus_ReadMemory &rArr; PEC_Calculation
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_StopBit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_StartBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReceiveByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEC_Calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
</UL>

<P><STRONG><a name="[d2]"></a>SMBus_ReadTemp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mlx90614.o(i.SMBus_ReadTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SMBus_ReadTemp &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadMemory
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[d3]"></a>SMBus_ReceiveBit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mlx90614.o(i.SMBus_ReceiveBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMBus_ReceiveBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReceiveByte
</UL>

<P><STRONG><a name="[d0]"></a>SMBus_ReceiveByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlx90614.o(i.SMBus_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SMBus_ReceiveByte &rArr; SMBus_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_SendBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReceiveBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadMemory
</UL>

<P><STRONG><a name="[d5]"></a>SMBus_SendBit</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mlx90614.o(i.SMBus_SendBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SMBus_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReceiveByte
</UL>

<P><STRONG><a name="[cf]"></a>SMBus_SendByte</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mlx90614.o(i.SMBus_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SMBus_SendByte &rArr; SMBus_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_SendBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReceiveBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadMemory
</UL>

<P><STRONG><a name="[ce]"></a>SMBus_StartBit</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, mlx90614.o(i.SMBus_StartBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SMBus_StartBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadMemory
</UL>

<P><STRONG><a name="[cd]"></a>SMBus_StopBit</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mlx90614.o(i.SMBus_StopBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SMBus_StopBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadMemory
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>SysTick_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; TIM4_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>TIM4_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp_tim.o(i.TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_Init &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[dc]"></a>TIM4_Set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_tim.o(i.TIM4_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[db]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
</UL>

<P><STRONG><a name="[da]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[d8]"></a>TimingDelay_Decrement</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_systick.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e2]"></a>UART_DMA_Enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_dma.o(i.UART_DMA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u2_printf
</UL>

<P><STRONG><a name="[e4]"></a>USART1_Config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bsp_usart1.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>USART2_Config</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, bsp_usart2.o(i.USART2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART2_Config &rArr; DMA_USARTx_TX_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USARTx_TX_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_USART_Config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[aa]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[e6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[af]"></a>USART_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_USART_Config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[e7]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>WriteCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled_i2c.o(i.WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteCmd &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[c2]"></a>WriteDat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled_i2c.o(i.WriteDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteDat &rArr; I2C_WriteByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN3
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[ea]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[143]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[94]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_check_cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_MQTT_SERVER
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_INIT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10a]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[ec]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[145]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[93]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_MQTT_SERVER
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
</UL>

<P><STRONG><a name="[146]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[147]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ed]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[148]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[149]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[14a]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[10b]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
</UL>

<P><STRONG><a name="[ee]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14b]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[14c]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[14d]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[130]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u2_printf
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[14f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[150]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[79]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f1]"></a>_nmea_parse_time</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, parse.o(i._nmea_parse_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
</UL>

<P><STRONG><a name="[109]"></a>check_cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_ec20.o(i.check_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[50]"></a>error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gps_config.o(i.error))
<BR>[Address Reference Count : 1]<UL><LI> nema_decode_test.o(i.nmea_decode_test)
</UL>
<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart1.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[119]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_pop
</UL>

<P><STRONG><a name="[51]"></a>gps_info</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gps_config.o(i.gps_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gps_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nema_decode_test.o(i.nmea_decode_test)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = main &rArr; nmea_decode_test &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_INIT
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_CONNECT_SERVER_CFG_INFOR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[118]"></a>nmea_BDGSA2info</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, parse.o(i.nmea_BDGSA2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nmea_BDGSA2info
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[117]"></a>nmea_BDGSV2info</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, parse.o(i.nmea_BDGSV2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmea_BDGSV2info
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[114]"></a>nmea_GNGGA2info</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, parse.o(i.nmea_GNGGA2info))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[116]"></a>nmea_GNGLL2info</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, parse.o(i.nmea_GNGLL2info))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[fa]"></a>nmea_GNRMC2info</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, parse.o(i.nmea_GNRMC2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nmea_GNRMC2info &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[115]"></a>nmea_GNVTG2info</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, parse.o(i.nmea_GNVTG2info))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[fc]"></a>nmea_GNZDA2info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, parse.o(i.nmea_GNZDA2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nmea_GNZDA2info
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[110]"></a>nmea_GPGGA2info</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, parse.o(i.nmea_GPGGA2info))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[111]"></a>nmea_GPGSA2info</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, parse.o(i.nmea_GPGSA2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nmea_GPGSA2info
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[112]"></a>nmea_GPGSV2info</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, parse.o(i.nmea_GPGSV2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmea_GPGSV2info
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[fd]"></a>nmea_GPRMC2info</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, parse.o(i.nmea_GPRMC2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nmea_GPRMC2info &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[fe]"></a>nmea_GPTXT2info</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, parse.o(i.nmea_GPTXT2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = nmea_GPTXT2info &rArr; nmea_info &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_info
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[113]"></a>nmea_GPVTG2info</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, parse.o(i.nmea_GPVTG2info))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[100]"></a>nmea_atof</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, tok.o(i.nmea_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[103]"></a>nmea_atoi</STRONG> (Thumb, 46 bytes, Stack size 272 bytes, tok.o(i.nmea_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nmea_atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_find_tail
</UL>

<P><STRONG><a name="[f9]"></a>nmea_decode_test</STRONG> (Thumb, 494 bytes, Stack size 1696 bytes, nema_decode_test.o(i.nmea_decode_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = nmea_decode_test &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_ndeg2degree
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_ReadTemp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_num
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMTconvert
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_MQTT_SEND_AUTO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>nmea_error</STRONG> (Thumb, 62 bytes, Stack size 1056 bytes, context.o(i.nmea_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPTXT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNVTG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSV
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSA
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
</UL>

<P><STRONG><a name="[10c]"></a>nmea_find_tail</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, parse.o(i.nmea_find_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nmea_find_tail &rArr; nmea_atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[ff]"></a>nmea_info</STRONG> (Thumb, 62 bytes, Stack size 1056 bytes, context.o(i.nmea_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = nmea_info &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPTXT2info
</UL>

<P><STRONG><a name="[108]"></a>nmea_ndeg2degree</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gmath.o(i.nmea_ndeg2degree))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nmea_ndeg2degree &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[10d]"></a>nmea_pack_type</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, parse.o(i.nmea_pack_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nmea_pack_type &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[107]"></a>nmea_parse</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, parser.o(i.nmea_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_push
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_pop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPVTG2info
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPTXT2info
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGSV2info
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGSA2info
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGGA2info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNZDA2info
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNVTG2info
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNRMC2info
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNGLL2info
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GNGGA2info
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_BDGSV2info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_BDGSA2info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[11b]"></a>nmea_parse_BDGSA</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, parse.o(i.nmea_parse_BDGSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = nmea_parse_BDGSA &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[11e]"></a>nmea_parse_BDGSV</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, parse.o(i.nmea_parse_BDGSV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = nmea_parse_BDGSV &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[11f]"></a>nmea_parse_GNGGA</STRONG> (Thumb, 146 bytes, Stack size 328 bytes, parse.o(i.nmea_parse_GNGGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nmea_parse_GNGGA &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[121]"></a>nmea_parse_GNGLL</STRONG> (Thumb, 116 bytes, Stack size 296 bytes, parse.o(i.nmea_parse_GNGLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = nmea_parse_GNGLL &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[122]"></a>nmea_parse_GNRMC</STRONG> (Thumb, 152 bytes, Stack size 328 bytes, parse.o(i.nmea_parse_GNRMC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nmea_parse_GNRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[123]"></a>nmea_parse_GNVTG</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, parse.o(i.nmea_parse_GNVTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = nmea_parse_GNVTG &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[124]"></a>nmea_parse_GNZDA</STRONG> (Thumb, 114 bytes, Stack size 304 bytes, parse.o(i.nmea_parse_GNZDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = nmea_parse_GNZDA &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[125]"></a>nmea_parse_GPGGA</STRONG> (Thumb, 146 bytes, Stack size 328 bytes, parse.o(i.nmea_parse_GPGGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nmea_parse_GPGGA &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[126]"></a>nmea_parse_GPGSA</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, parse.o(i.nmea_parse_GPGSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = nmea_parse_GPGSA &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[127]"></a>nmea_parse_GPGSV</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, parse.o(i.nmea_parse_GPGSV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = nmea_parse_GPGSV &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[128]"></a>nmea_parse_GPRMC</STRONG> (Thumb, 152 bytes, Stack size 328 bytes, parse.o(i.nmea_parse_GPRMC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[129]"></a>nmea_parse_GPTXT</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, parse.o(i.nmea_parse_GPTXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = nmea_parse_GPTXT &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[12a]"></a>nmea_parse_GPVTG</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, parse.o(i.nmea_parse_GPVTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = nmea_parse_GPVTG &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[12d]"></a>nmea_parser_buff_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parser.o(i.nmea_parser_buff_clear))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[106]"></a>nmea_parser_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, parser.o(i.nmea_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = nmea_parser_init &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[11a]"></a>nmea_parser_pop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, parser.o(i.nmea_parser_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmea_parser_pop &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[10f]"></a>nmea_parser_push</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, parser.o(i.nmea_parser_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[12c]"></a>nmea_parser_real_push</STRONG> (Thumb, 998 bytes, Stack size 40 bytes, parser.o(i.nmea_parser_real_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_buff_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPTXT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNVTG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSV
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSA
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_pack_type
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_find_tail
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_push
</UL>

<P><STRONG><a name="[104]"></a>nmea_property</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, context.o(i.nmea_property))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
</UL>

<P><STRONG><a name="[f3]"></a>nmea_scanf</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, tok.o(i.nmea_scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPTXT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNVTG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSV
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSA
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
</UL>

<P><STRONG><a name="[12f]"></a>nmea_time_now</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, time.o(i.nmea_time_now))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
</UL>

<P><STRONG><a name="[11d]"></a>nmea_trace_buff</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, context.o(i.nmea_trace_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nmea_trace_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPTXT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNZDA
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNVTG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNRMC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGLL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GNGGA
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSV
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_BDGSA
</UL>

<P><STRONG><a name="[105]"></a>nmea_zero_INFO</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, info.o(i.nmea_zero_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nmea_zero_INFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_time_now
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_decode_test
</UL>

<P><STRONG><a name="[102]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
</UL>

<P><STRONG><a name="[4f]"></a>trace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gps_config.o(i.trace))
<BR>[Address Reference Count : 1]<UL><LI> nema_decode_test.o(i.nmea_decode_test)
</UL>
<P><STRONG><a name="[9c]"></a>u2_printf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_usart2.o(i.u2_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u2_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_Enable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_send_cmd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d6]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d7]"></a>SetSysClockTo72</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f8]"></a>NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>SysTick_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_systick.o(i.SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[a7]"></a>GPS_DMA_Config</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gps_config.o(i.GPS_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPS_DMA_Config &rArr; GPS_Interrupt_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Interrupt_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Config
</UL>

<P><STRONG><a name="[a8]"></a>GPS_Interrupt_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gps_config.o(i.GPS_Interrupt_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPS_Interrupt_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DMA_Config
</UL>

<P><STRONG><a name="[a6]"></a>GPS_USART_Config</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, gps_config.o(i.GPS_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPS_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Config
</UL>

<P><STRONG><a name="[a4]"></a>IsLeapYear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gps_config.o(i.IsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMTconvert
</UL>

<P><STRONG><a name="[7d]"></a>DHT11_GPIO_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_dht11.o(i.DHT11_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[82]"></a>DHT11_Mode_IPU</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_dht11.o(i.DHT11_Mode_IPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_Mode_IPU &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
</UL>

<P><STRONG><a name="[83]"></a>DHT11_Mode_Out_PP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_dht11.o(i.DHT11_Mode_Out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_Mode_Out_PP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
</UL>

<P><STRONG><a name="[84]"></a>DHT11_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_dht11.o(i.DHT11_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_ReadByte &rArr; CPU_TS_Tmr_Delay_US
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_TempAndHumidity
</UL>

<P><STRONG><a name="[bd]"></a>NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_tim.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[be]"></a>NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_usart1.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_usart2.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_exti.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[ef]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[eb]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[f5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[71]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[76]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
